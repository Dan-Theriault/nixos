;;; .emacs --- BLah

;;; Commentary:

;;; Code:
(eval-when-compile (require 'use-package))

(setq user-full-name "Daniel Theriault"
      user-mail-address "dan@theriault.codes")

;; utils
(use-package s) ;;strings
(use-package dash) ;;lists
(use-package f) ;;files
(use-package ht) ;;hash tables
(use-package alert :config (setq alert-default-style 'libnotify))

(use-package evil
  :init
  (setq evil-want-C-u-scroll t)
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :bind
  (:map evil-visual-state-map
	("<" . (lambda ()
		 (interactive)
		 (evil-shift-left (region-beginning) (region-end))
		 (evil-normal-state)
		 (evil-visual-restore)))
	(">" . (lambda ()
		 (interactive)
		 (evil-shift-right (region-beginning) (region-end))
		 (evil-normal-state)
		 (evil-visual-restore)))
	("C-p" . 'counsel-find-file))
  (:map evil-motion-state-map
	("E" . 'evil-end-of-line)
	("B" . 'evil-beginning-of-line)
	("j" . 'evil-next-visual-line)
	("k" . 'evil-previous-visual-line))
  (:map evil-normal-state-map
	("C-p" . 'counsel-find-file))
  (:map evil-insert-state-map
	("C-p" . 'counsel-find-file))
  :config
  (evil-define-command custom-save-and-close (file &optional bang)
    "saves the current buffer and closes the buffer"
    :repeat nil
    (interactive "<f><!>")
    (evil-write nil nil nil file bang)
    (kill-this-buffer))

  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "quit" 'evil-quit)
  (evil-ex-define-cmd "x" 'custom-save-and-close)
  (evil-ex-define-cmd "wq" 'custom-save-and-close)
  (evil-mode 1))

;; Keeps breaking things
;; (use-package evil-collection
;;   :after evil
;;   :custom (evil-collection-setup-minibuffer t)
;;   :config
;;   (evil-collection-init))

(use-package evil-leader
  :config (global-evil-leader-mode))

(use-package evil-surround
  :config (global-evil-surround-mode))

(use-package evil-indent-textobject)

(use-package evil-commentary
  :config (evil-commentary-mode))

(use-package evil-cleverparens
  ;; :hook (emacs-lisp-mode slime-mode geiser-mode)
  :config
  (require 'evil-cleverparens-text-objects))

(use-package evil-goggles
  :config
  (evil-goggles-mode))

(use-package org
  :config
  (use-package org-journal))

(use-package evil-org
  :after org evil
  :hook org-mode
  :config
  (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package elpy
  :config
  (setq python-shell-interpreter "ipython"
	python-shell-interpreter-args "--simple-prompt -i")
  (elpy-enable))

(use-package exec-path-from-shell
  :config (exec-path-from-shell-initialize))

(use-package find-file-in-project
  :config (setq ffip-use-rust-fd t))

(use-package frames-only-mode
  :config (frames-only-mode))

(use-package ivy
  :bind
  (([remap list-buffers] . ivy-switch-buffer)
   ([remap switch-to-buffer] . ivy-switch-buffer)
   ([remap switch-to-buffer-other-window] . ivy-switch-buffer-other-window)
   :package ivy :map ivy-minibuffer-map ("<escape>" . abort-recursive-edit))
  :init
  (defvar projectile-completion-system)
  (defvar magit-completing-read-function)
  (defvar projector-completion-system)
  (setq projectile-completion-system 'ivy
        magit-completing-read-function 'ivy-completing-read))

(use-package counsel
  :bind*
  (([remap find-library] . counsel-find-library)
   ([remap execute-extended-command] . counsel-M-x)
   ([remap find-file] . counsel-find-file)
   ([remap apropos] . counsel-apropos)
   ([remap describe-bindings] . counsel-descbinds)
   ([remap describe-face] . counsel-describe-faces)
   ([remap list-faces-display] . counsel-faces)
   ([remap imenu] . counsel-imenu)
   ([remap load-library] . counsel-load-library)
   ([remap load-theme] . counsel-load-theme)
   ([remap yank-pop] . counsel-yank-pop)
   ([remap info-lookup-symbol] . counsel-info-lookup-symbol)
   ([remap pop-to-mark-command] . counsel-mark-ring)
   ([remap bookmark-jump] . counsel-bookmark)))

(use-package swiper)

(use-package srefactor
  :config (require 'srefactor-lisp))

;; (use-package aggressive-indent
;;   :hook emacs-lisp-mode)

(use-package ws-butler :config (ws-butler-global-mode))

(use-package magit
  :after evil
  :config
  (use-package evil-magit))

(use-package markdown-mode
  :mode (("\\.md\\'" . gfm-mode))
  :hook flyspell-mode)

(use-package tex
  :config
  (use-package auctex-latexmk)
  (use-package pdf-tools)
  (use-package magic-latex-buffer :hook latex-mode))

(use-package json-mode)

;; Nix Stuff
(use-package nix-mode)
(use-package company-nixos-options)
(use-package nix-sandbox)
(use-package nixos-options)

(use-package geiser
  :config
  (setq geiser-guile-binary "/run/current-system/sw/bin/guile"))

(use-package slime
  :config
  (setq inferior-lisp-program "/run/current-system/sw/bin/sbcl"))

(use-package company
  :config
  ; (use-package company-auctex)
  ; (use-package company-lsp)
  (use-package company-quickhelp :config (company-quickhelp-mode))
  (use-package company-shell)
  (add-to-list 'company-backends 'company-shell)
  (global-company-mode))

(use-package undo-tree)

(use-package deft
  :config
  (setq deft-directory "~/Notes")
  (setq deft-default-extension "md")
  (setq deft-text-mode 'markdown-mode)
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-markdown-mode-title-level 1)
  (setq deft-auto-save-interval 0))

(use-package flycheck
  :hook (prog-mode . flycheck-mode)
  :config
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
	      (id (one-or-more (not (any " "))))
	      (message) line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode)))

;;appearance
(use-package diff-hl :config (global-diff-hl-mode))
(use-package hl-todo :config (global-hl-todo-mode))
(use-package highlight-parentheses)

(set-face-attribute 'default nil
  :family "IBM Plex Mono"
  :height 85
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil :family "IBM Plex Mono")
(set-face-attribute 'variable-pitch nil :family "IBM Plex Serif")

; poet settings
(use-package poet-theme
  :config
  (use-package olivetti)
  (use-package typo)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))
  (add-hook 'text-mode-hook (lambda ()
	      (variable-pitch-mode 1)
	      (olivetti-mode 1)
	      (olivetti-set-width 120)
	      (typo-mode))))

(savehist-mode 1)
(tool-bar-mode -1)
(show-paren-mode t)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(fringe-mode 0)

(setq-default display-line-numbers 'relative
	      display-line-numbers-widen t
	      ;; this is the default
	      display-line-numbers-current-absolute t)

(set-face-attribute 'line-number-current-line nil :height 80)
(set-face-attribute 'line-number nil :height 80 :family "IBM Plex Mono")

(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(setq save-interprogram-paste-before-kill t)
(load-theme 'poet t)
